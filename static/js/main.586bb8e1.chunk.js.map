{"version":3,"sources":["components/Header/Header.js","components/Task1/Task1.js","components/Task1/Task1B.js","components/Draw/Draw.js","components/Task2/Task2.js","components/Task3/task3A.js","components/Task3/Task3.js","components/GeneralInfo/GeneralInfo.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","href","Task1","props","state","inputVal","initial","handleInputChange","bind","changeInitial","this","timer","event","clearTimeout","setState","target","value","setTimeout","str","task1ASolution","vitaminsArray","black","grey","white","split","map","elem","push","sort","startColor","currColor","result","changeAllToWhite","length","source","current","pop","JSON","stringify","Task1B","id","parse","el","Input","placeholder","label","onChange","React","Component","Draw","canvas","createRef","updateCanvas","figures","clearCanvas","drawLine","newEl","index","triangle","rectangle","pentagon","hexagon","heptagon","octagon","color","ctx","getContext","startPosition","fillStyle","strokeStyle","beginPath","moveTo","lineTo","stroke","fill","strokeRect","fillRect","currentLine","undefined","updated","type","line","showOperationsList","lineStr","time","cleaner","setInterval","width","height","clearRect","clearInterval","list","i","statesArray","statesTimer","ref","localeCompare","Task2","e","changePassedProp","passedLine","trim","console","log","task3A","initialState","operations","stateParsed","res","newState","beforeColorSwap","afterColorSwap","parsedItemIndex","indexOf","join","Task3","handleInputTextChange","idx","evt","newInputs","inputs","sidx","handleRemoveInput","filter","handleAddState","concat","createInputs","style","marginTop","Button","content","onClick","opacity","marginLeft","showAnimation","swaps","states","initialVitaminsState","statesForAnim","handleInitialChange","primary","marginBottom","GeneralInfo","List","Item","Content","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.586bb8e1.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\n\r\nconst Header = () => {\r\n    return <div className='page-header'>\r\n        <div className='header-title'>\r\n            VitaminPuzzle<span className='author'>{' by Taras Nazar'}</span>\r\n        </div>\r\n        <div className='link-block'>\r\n            <a href='#task1'>TASK 1</a>\r\n            <a href='#task2'>TASK 2</a>\r\n            <a href='#task3'>TASK 3</a>\r\n        </div>\r\n        <a />\r\n    </div>\r\n}\r\n\r\nexport default Header;","import React from 'react'\r\nimport { Task1B } from './Task1B'\r\nimport { Input } from 'semantic-ui-react';\r\n\r\nclass Task1 extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            inputVal: '',\r\n            initial:'3B 4B 5B 6B'\r\n        }\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.changeInitial = this.changeInitial.bind(this);\r\n    }\r\n    timer;\r\n\r\n\r\n    componentDidMount() {\r\n        this.timer = null;\r\n    }\r\n\r\n    handleInputChange(event) {\r\n        clearTimeout(this.timer);\r\n        this.setState({\r\n            ...this.state,\r\n            inputVal: event.target.value\r\n        },()=>{\r\n            this.timer = setTimeout(() => {\r\n               this.changeInitial(this.state.inputVal);\r\n            }, 2000);\r\n        })   \r\n    }\r\n\r\n    changeInitial(str){\r\n        this.setState({\r\n            ...this.state,\r\n            initial: str\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const task1ASolution = Task1B(this.state.initial);\r\n        return <div id='task1' className='task-container'>\r\n            <div className='task-header'>\r\n                TASK 1\r\n        </div>\r\n            <ol>\r\n                {\r\n                    JSON.parse(task1ASolution).map(el => {\r\n                        return <li>{el[0] + ' ' + el[1] + '-->' + el[2]}</li>\r\n                    })\r\n                }\r\n            </ol>\r\n            <Input placeholder='3B 4B 5B 6B' label='Enter initial state' onChange={this.handleInputChange} />\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default Task1;","export const Task1B = (str) => {\r\n\r\n    let vitaminsArray = [];\r\n    let black = [];\r\n    let grey = [];\r\n    let white = [];\r\n\r\n    vitaminsArray = str.split(' ');\r\n\r\n    vitaminsArray.map(elem => {\r\n        switch (elem[1]) {\r\n            case 'B':\r\n                black.push(elem[0]);\r\n                break;\r\n\r\n            case 'G':\r\n                grey.push(elem[0]);\r\n                break;\r\n\r\n            case 'W':\r\n                white.push(elem[0]);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    });\r\n\r\n    black.sort();\r\n    grey.sort();\r\n    white.sort();\r\n\r\n    let startColor = vitaminsArray[0][1];\r\n    let currColor = startColor === 'B' ? 'G' : 'B';\r\n    let result = [];\r\n\r\n    const changeAllToWhite = (length, source, target, current) => {\r\n\r\n        if (length === 0) {\r\n            return;\r\n        }\r\n\r\n        changeAllToWhite(length - 1, source, current, target);\r\n\r\n        switch (source + \"-\" + target) {\r\n\r\n            case \"G-B\":\r\n                black.push(grey.pop());\r\n                result.push([black[black.length - 1], source, target]);\r\n                break;\r\n\r\n\r\n            case \"G-W\":\r\n                white.push(grey.pop());\r\n                result.push([white[white.length - 1], source, target]);\r\n                break;\r\n\r\n            case \"B-G\":\r\n                grey.push(black.pop());\r\n                result.push([grey[grey.length - 1], source, target]);\r\n                break;\r\n\r\n            case \"B-W\":\r\n                white.push(black.pop());\r\n                result.push([white[white.length - 1], source, target]);\r\n                break;\r\n\r\n            case \"W-G\":\r\n                grey.push(white.pop());\r\n                result.push([grey[grey.length - 1], source, target]);\r\n                break;\r\n\r\n            case \"W-B\":\r\n                black.push(white.pop());\r\n                result.push([black[black.length - 1], source, target]);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        changeAllToWhite(length - 1, current, target, source);\r\n\r\n    }\r\n\r\n    changeAllToWhite(vitaminsArray.length, startColor, 'W', currColor);\r\n\r\n    result = JSON.stringify(result);\r\n\r\n    return result;\r\n\r\n}","import React from 'react'\r\nimport './Draw.css'\r\n\r\n\r\nclass Draw extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentLine: undefined,\r\n            updated: false\r\n        }\r\n    }\r\n\r\n    canvas = React.createRef();\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.line.localeCompare(state.currentLine) !== 0) {\r\n            return {\r\n                updated: true,\r\n                currentLine: props.line\r\n            }\r\n        }\r\n        else {\r\n            return {\r\n                currentLine: state.currentLine,\r\n                updated: false,\r\n            };\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.type === 'operations' && this.props.line.length > 0) {\r\n            this.showOperationsList(this.props.line)\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n\r\n        if (this.state.updated && this.props.type === 'line') {\r\n\r\n            this.updateCanvas(this.state.currentLine);\r\n        }\r\n        else if (this.state.updated && this.props.type === 'operations' && this.props.line.length > 0) {\r\n\r\n            this.showOperationsList(this.props.line)\r\n        }\r\n    }\r\n\r\n    updateCanvas = (figures) => {\r\n        this.clearCanvas(figures);\r\n    }\r\n\r\n    drawLine = (figures) => {\r\n        const lineArr = figures.split(\" \");\r\n        const lineParseArr = lineArr.map(el => {\r\n            let newEl = el.split('');\r\n            switch (newEl[1]) {\r\n                case 'W':\r\n                    newEl[1] = 'white';\r\n                    break;\r\n                case 'B':\r\n                    newEl[1] = 'black';\r\n                    break;\r\n                case 'G':\r\n                    newEl[1] = 'grey'\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            return newEl;\r\n        })\r\n        lineParseArr.map((el, index) => {\r\n            switch (el[0]) {\r\n                case '3':\r\n                    this.triangle(index, el[1]);\r\n                    break;\r\n                case '4':\r\n                    this.rectangle(index, el[1]);\r\n                    break;\r\n                case '5':\r\n                    this.pentagon(index, el[1]);\r\n                    break;\r\n                case '6':\r\n                    this.hexagon(index, el[1]);\r\n                    break;\r\n                case '7':\r\n                    this.heptagon(index, el[1]);\r\n                    break;\r\n                case '8':\r\n                    this.octagon(index, el[1]);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        })\r\n    }\r\n\r\n    triangle = (index, color) => {\r\n        const ctx = this.canvas.current.getContext('2d');\r\n        const margin = index === 0 ? 10 : index * 40;\r\n        const startPosition = index * 100 + margin;\r\n        ctx.fillStyle = color;\r\n        ctx.strokeStyle = 'black';\r\n        ctx.beginPath();\r\n        ctx.moveTo(startPosition + 50, 10);\r\n        ctx.lineTo(startPosition, 110);\r\n        ctx.lineTo(startPosition + 100, 110);\r\n        ctx.lineTo(startPosition + 50, 10);\r\n        ctx.stroke();\r\n        ctx.fill();\r\n    }\r\n\r\n    rectangle = (index, color) => {\r\n        const ctx = this.canvas.current.getContext('2d');\r\n        const margin = index === 0 ? 10 : index * 40;\r\n        const startPosition = index * 100 + margin;\r\n        ctx.strokeStyle = 'black';\r\n        ctx.fillStyle = color;\r\n        ctx.strokeRect(startPosition, 10, 100, 100);\r\n        ctx.fillRect(startPosition, 10, 100, 100);\r\n    }\r\n\r\n    pentagon = (index, color) => {\r\n        const ctx = this.canvas.current.getContext('2d');\r\n        const margin = index === 0 ? 10 : index * 40;\r\n        const startPosition = index * 100 + margin;\r\n        ctx.strokeStyle = 'black';\r\n        ctx.fillStyle = color;\r\n        ctx.beginPath();\r\n        ctx.moveTo(startPosition + 30, 110);\r\n        ctx.lineTo(startPosition, 60);\r\n        ctx.lineTo(startPosition + 55, 10);\r\n        ctx.lineTo(startPosition + 110, 60);\r\n        ctx.lineTo(startPosition + 80, 110);\r\n        ctx.lineTo(startPosition + 30, 110);\r\n        ctx.stroke();\r\n        ctx.fill();\r\n    }\r\n\r\n    hexagon = (index, color) => {\r\n        const ctx = this.canvas.current.getContext('2d');\r\n        const margin = index === 0 ? 10 : index * 40;\r\n        const startPosition = index * 100 + margin;\r\n        ctx.strokeStyle = 'black';\r\n        ctx.fillStyle = color;\r\n        ctx.beginPath();\r\n        ctx.moveTo(startPosition + 30, 110);\r\n        ctx.lineTo(startPosition, 60);\r\n        ctx.lineTo(startPosition + 30, 10);\r\n        ctx.lineTo(startPosition + 80, 10);\r\n        ctx.lineTo(startPosition + 110, 60);\r\n        ctx.lineTo(startPosition + 80, 110);\r\n        ctx.lineTo(startPosition + 30, 110);\r\n        ctx.stroke();\r\n        ctx.fill();\r\n    }\r\n\r\n    heptagon = (index, color) => {\r\n        const ctx = this.canvas.current.getContext('2d');\r\n        const margin = index === 0 ? 10 : index * 40;\r\n        const startPosition = index * 100 + margin;\r\n        ctx.strokeStyle = 'black';\r\n        ctx.fillStyle = color;\r\n        ctx.beginPath();\r\n        ctx.moveTo(startPosition + 30, 110);\r\n        ctx.lineTo(startPosition, 73);\r\n        ctx.lineTo(startPosition + 10, 43);\r\n        ctx.lineTo(startPosition + 55, 10);\r\n        ctx.lineTo(startPosition + 100, 43);\r\n        ctx.lineTo(startPosition + 110, 73);\r\n        ctx.lineTo(startPosition + 80, 110);\r\n        ctx.lineTo(startPosition + 30, 110);\r\n        ctx.stroke();\r\n        ctx.fill();\r\n    }\r\n\r\n    octagon = (index, color) => {\r\n        const ctx = this.canvas.current.getContext('2d');\r\n        const margin = index === 0 ? 10 : index * 40;\r\n        const startPosition = index * 100 + margin;\r\n        ctx.strokeStyle = 'black';\r\n        ctx.fillStyle = color;\r\n        ctx.beginPath();\r\n        ctx.moveTo(startPosition + 30, 110);\r\n        ctx.lineTo(startPosition, 73);\r\n        ctx.lineTo(startPosition, 43);\r\n        ctx.lineTo(startPosition + 30, 10);\r\n        ctx.lineTo(startPosition + 80, 10);\r\n        ctx.lineTo(startPosition + 110, 43);\r\n        ctx.lineTo(startPosition + 110, 73);\r\n        ctx.lineTo(startPosition + 80, 110);\r\n        ctx.lineTo(startPosition + 30, 110);\r\n        ctx.stroke();\r\n        ctx.fill();\r\n    }\r\n\r\n    clearCanvas(lineStr) {\r\n        const ctx = this.canvas.current.getContext('2d');\r\n        let time = 0;\r\n        const cleaner = setInterval(() => {\r\n            time++;\r\n            ctx.fillStyle = `rgba(255,255,255, ${time / 10})`\r\n            ctx.fillRect(0, 0, this.canvas.current.width, this.canvas.current.height);\r\n            if (time === 11) {\r\n                ctx.clearRect(0, 0, this.canvas.current.width, this.canvas.current.height);\r\n                this.drawLine(lineStr);\r\n                clearInterval(cleaner);\r\n            }\r\n        }, 100);\r\n    }\r\n\r\n    showOperationsList(list) {\r\n        let i = 0;\r\n        const statesArray = JSON.parse(list);\r\n        const statesTimer = setInterval(() => {\r\n            this.updateCanvas(statesArray[i]);\r\n            i++;\r\n            if (i === statesArray.length) {\r\n                clearInterval(statesTimer);\r\n            }\r\n        }, 1400)\r\n    }\r\n\r\n    render() {\r\n        return <canvas width={700} ref={this.canvas} />\r\n    }\r\n}\r\n\r\nexport default Draw;","import React from 'react';\r\nimport { Input } from 'semantic-ui-react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport Draw from '../Draw/Draw'\r\n\r\nclass Task2 extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentLine: '',\r\n            passedLine: ''\r\n        }\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.changePassedProp = this.changePassedProp.bind(this);\r\n    }\r\n    timer;\r\n\r\n    componentDidMount() {\r\n        this.timer = null;\r\n    }\r\n\r\n    handleInputChange = (e) => {\r\n        clearTimeout(this.timer)\r\n        this.setState({\r\n            currentLine: e.target.value\r\n        }, () => {\r\n            this.timer = setTimeout(() => {\r\n                this.changePassedProp(this.state.currentLine)\r\n            }, 3000)\r\n        })\r\n    }\r\n\r\n    changePassedProp = (line) => {\r\n        this.setState({\r\n            ...this.state,\r\n            passedLine: line.trim()\r\n        }, () => {\r\n            console.log(this.state.passedLine)\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return <div className='task-container'>\r\n            <div className='task-header' id='task2'>TASK 2</div>\r\n            <div>* only triangle, rectangle, pentagon, hexagon, heptagon, octagon are available </div>\r\n            <Draw type='line' line={this.state.passedLine} />\r\n            <Input label='Enter row' onChange={this.handleInputChange} placeholder='Example: 3G 4B 5W' />\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default Task2;","export const task3A = (initialState, operations) => {\r\n\r\n    let stateParsed = initialState.split(' ');\r\n    let res = [initialState];\r\n\r\n    operations.map(el => {\r\n        let newState = '';\r\n        const beforeColorSwap = el[0] + el[1];\r\n        const afterColorSwap = el[0] + el[2];\r\n        const parsedItemIndex = stateParsed.indexOf(beforeColorSwap);\r\n\r\n        stateParsed[parsedItemIndex] = afterColorSwap;\r\n        newState = stateParsed.join(' ');\r\n        res.push(newState);\r\n    })\r\n\r\n    res = JSON.stringify(res);\r\n    \r\n    return res;\r\n}","import React from 'react'\r\nimport Draw from '../Draw/Draw'\r\nimport { task3A } from './task3A'\r\nimport { Input, Button } from 'semantic-ui-react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport './Task3.css'\r\n\r\nclass Task3 extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            initialVitaminsState: '',\r\n            inputs: [''],\r\n            statesForAnim:''\r\n        }\r\n        this.handleInputTextChange = this.handleInputTextChange.bind(this);\r\n        this.handleRemoveInput = this.handleRemoveInput.bind(this);\r\n        this.handleAddState = this.handleAddState.bind(this);\r\n        this.handleInitialChange = this.handleInitialChange.bind(this);\r\n        this.showAnimation = this.showAnimation.bind(this);\r\n    }\r\n\r\n    handleInputTextChange = idx => evt => {\r\n        const newInputs = this.state.inputs.map((el, sidx) => {\r\n            if (idx !== sidx) return el;\r\n            return evt.target.value;\r\n        });\r\n        this.setState({ inputs: newInputs });\r\n    };\r\n\r\n    handleRemoveInput = idx => () => {\r\n        this.setState({\r\n            inputs: this.state.inputs.filter((el, sidx) => idx !== sidx)\r\n        });\r\n    };\r\n\r\n    handleAddState = () => {\r\n        if (this.state.inputs.length < 5)\r\n            this.setState({\r\n                inputs: this.state.inputs.concat([''])\r\n            });\r\n    };\r\n\r\n    createInputs = () => {\r\n        return this.state.inputs.map((el, idx) => (\r\n            <div className='task3-state-with-button'>\r\n                <Input\r\n                    label='Enter swap'\r\n                    className=\"task3-state-input\"\r\n                    type=\"text\"\r\n                    style={{ marginTop: '10px' }}\r\n                    placeholder={`Example: 4 G B `}\r\n                    value={el}\r\n                    onChange={this.handleInputTextChange(idx)}\r\n                />\r\n                {\r\n                    <Button\r\n                        type=\"button\"\r\n                        content='X'\r\n                        color='red'\r\n                        onClick={this.handleRemoveInput(idx)}\r\n                        style={{ opacity: idx > 0 ? 1 : 0, marginLeft: '10px' }}\r\n                        className=\"delete-input-button\"\r\n                    />\r\n                }\r\n            </div>\r\n        ));\r\n    };\r\n\r\n    showAnimation = () => {\r\n        let swaps = this.state.inputs.map(el => el.split(' '));\r\n        const states = task3A(this.state.initialVitaminsState, swaps);\r\n        this.setState({\r\n            ...this.state,\r\n            statesForAnim:states\r\n        })\r\n    }\r\n\r\n    handleInitialChange = evt => {\r\n        this.setState({\r\n            ...this.state,\r\n            initialVitaminsState: evt.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return <div className='task-container'>\r\n            <div className='task-header' id='task3'>TASK 3</div>\r\n            <div>* only triangle, rectangle, pentagon, hexagon, heptagon, octagon are available </div>\r\n            <Draw type='operations' line={this.state.statesForAnim} />\r\n            <Input\r\n                label='Enter initial state'\r\n                className=\"task3-state-input\"\r\n                type=\"text\"\r\n                style={{ marginTop: '10px' }}\r\n                placeholder={`Example: 3G 4G `}\r\n                onChange={this.handleInitialChange}\r\n            />\r\n            <div className=\"task3-input-container\">\r\n                {this.createInputs()}\r\n                <Button\r\n                    primary\r\n                    className=\"add-input-button\"\r\n                    style={{ marginTop: '20px', marginBottom: '40px' }}\r\n                    type=\"button\"\r\n                    content='Add color swap'\r\n                    onClick={this.handleAddState}\r\n                />\r\n                <Button\r\n                    color='green'\r\n                    className=\"add-input-button\"\r\n                    style={{ marginTop: '20px', marginBottom: '40px' }}\r\n                    type=\"button\"\r\n                    content='Show animation'\r\n                    onClick={this.showAnimation}\r\n                />\r\n            </div>\r\n\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default Task3;","import React from 'react';\r\nimport { List } from 'semantic-ui-react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport \"./GeneralInfo.css\"\r\n\r\nconst GeneralInfo = () => {\r\n    return <div className='general-info'>\r\n        <div className='task-header'>\r\n           COMPLETED TASKS DESCRIPTION\r\n        </div>\r\n        <List>\r\n            <List.Item>\r\n                <List.Content>\r\n                    <List.Header>Task 1</List.Header>\r\n                    <List.Item>\r\n                        A: write list of color swaps for given situation\r\n                    </List.Item>\r\n                    <List.Item>\r\n                        B: write makeAllWhite function that will recieve an initial situation and return of needed color swaps to make all vitamins white\r\n                    </List.Item>\r\n                </List.Content>\r\n            </List.Item>\r\n            <List.Item>\r\n                <List.Content>\r\n                    <List.Header>Task 2</List.Header>\r\n                    <List.Item>\r\n                        A: write a piece of code that will prepare a visualisation of a Vitamin Line\r\n                    </List.Item>\r\n                    <List.Item>\r\n                        B: modify task A to smoothly rerender when input is changed\r\n                    </List.Item>\r\n                </List.Content>\r\n            </List.Item>\r\n            <List.Item>\r\n                <List.Content>\r\n                    <List.Header>Task 3</List.Header>\r\n                    <List.Item>\r\n                        A: write a function that will take initial state and list of color swaps and will return array of consecutive states\r\n                    </List.Item>\r\n                    <List.Item>\r\n                        B: combine task 2B and 3A to prepare animation consisting of multiple Colour Swap transitions.\r\n                    </List.Item>\r\n                </List.Content>\r\n            </List.Item>\r\n        </List>\r\n    </div>\r\n}\r\n\r\nexport default GeneralInfo;","import React from 'react';\nimport Header from './components/Header/Header'\nimport './App.css';\nimport Task1 from './components/Task1/Task1'\nimport Task2 from './components/Task2/Task2'\nimport Task3 from './components/Task3/Task3'\nimport GeneralInfo from './components/GeneralInfo/GeneralInfo'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <div className='main'>\n        <GeneralInfo/>\n        <Task1/>\n        <Task2 />\n        <Task3 />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}